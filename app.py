import os
import streamlit as st
import pandas as pd
import joblib
import tensorflow as tf
import numpy as np
import plotly.express as px
from PIL import Image
from lifelines import CoxPHFitter
from tensorflow.keras.models import load_model as tf_load_model

# --- Patch scikit-learn pour √©viter l'erreur 'sklearn_tags' ---
try:
    from sklearn.base import BaseEstimator
    if not hasattr(BaseEstimator, "sklearn_tags"):
        @property
        def sklearn_tags(self):
            return {}
        BaseEstimator.sklearn_tags = sklearn_tags
except Exception as e:
    pass

# ----------------------------------------------------------
# Configuration de l'application
# ----------------------------------------------------------
st.set_page_config(
    page_title="MOYO",
    page_icon="‚öïÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Chemins vers les ressources
DATA_PATH = "data/data.xlsx"
LOGO_PATH = "assets/header.jpg"
TEAM_IMG_PATH = "assets/img0.jpeg"

# Configuration des mod√®les
MODELS = {
    "Cox PH": "models/coxph.joblib",
    "RSF": "models/rsf.joblib",
    "DeepSurv": "models/deepsurv.keras",
    "GBST": "models/gbst.joblib"
}

# Configuration des variables
# Pour AGE, on souhaite conserver la valeur num√©rique, pour les autres, conversion Oui/Non
FEATURE_CONFIG = {
    "AGE": "√Çge",
    "Cardiopathie": "Cardiopathie",
    "Ulceregastrique": "Ulc√®re gastrique",
    "Douleurepigastrique": "Douleur √©pigastrique",
    "Ulcero-bourgeonnant": "L√©sion ulc√©ro-bourgeonnante",
    "Denitrution": "D√©nutrition",
    "Tabac": "Tabagisme actif",
    "Mucineux": "Type mucineux",
    "Infiltrant": "Type infiltrant",
    "Stenosant": "Type st√©nosant",
    "Metastases": "M√©tastases",
    "Adenopathie": "Ad√©nopathie",
}


# D√©finition des chemins d'images
TEAM_MEMBERS = [
    {
        "name": "Pr. Aba Diop",
        "role": "Ma√Ætre de Conf√©rences",
        "email": "aba.diop@example.com",
        "linkedin": "https://linkedin.com/in/abadiop",
        "photo": "assets/abadiop.jpeg"  # Remplacez par le vrai chemin
    },
    {
        "name": "PhD. Idrissa Sy",
        "role": "Enseignant Chercheur",
        "email": "idrissa.sy@example.com",
        "linkedin": "https://linkedin.com/in/idrissasy",
        "photo": "assets/idrissasy.jpeg"  # Remplacez par le vrai chemin
    },
    {
        "name": "M. Ahmed Sefdine",
        "role": "√âtudiant",
        "email": "ahmed.sefdine@example.com",
        "linkedin": "https://linkedin.com/in/sefdineahmed",
        "photo": "assets/sefdine.jpeg"  # Remplacez par le vrai chemin
    }
]

# ----------------------------------------------------------
# Fonctions Utilitaires
# ----------------------------------------------------------
@st.cache_data(show_spinner=False)
def load_data():
    """Charge les donn√©es depuis le fichier Excel."""
    if os.path.exists(DATA_PATH):
        return pd.read_excel(DATA_PATH)
    else:
        st.error(f"‚ùå Fichier introuvable : {DATA_PATH}")
        return pd.DataFrame()

@st.cache_resource(show_spinner=False)
def load_model(model_path):
    """
    Charge un mod√®le pr√©-entra√Æn√©.
    Pour les mod√®les Keras (.keras ou .h5) on utilise tf.keras.models.load_model.
    Pour les autres, joblib.load.
    """
    if not os.path.exists(model_path):
        st.error(f"‚ùå Mod√®le introuvable : {model_path}")
        return None

    try:
        _, ext = os.path.splitext(model_path)
        if ext in ['.keras', '.h5']:
            # Fonction de perte custom pour DeepSurv (si n√©cessaire)
            def cox_loss(y_true, y_pred):
                event = tf.cast(y_true[:, 0], dtype=tf.float32)
                risk = y_pred[:, 0]
                log_risk = tf.math.log(tf.cumsum(tf.exp(risk), reverse=True))
                loss = -tf.reduce_mean((risk - log_risk) * event)
                return loss
            return tf_load_model(model_path, custom_objects={"cox_loss": cox_loss})
        else:
            return joblib.load(model_path)
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du mod√®le : {e}")
        return None

def encode_features(inputs):
    """
    Encode les variables.
    Pour 'AGE', on conserve la valeur num√©rique.
    Pour les autres, "OUI" devient 1 et toute autre valeur 0.
    """
    encoded = {}
    for k, v in inputs.items():
        if k == "AGE":
            encoded[k] = v
        else:
            encoded[k] = 1 if v.upper() == "OUI" else 0
    return pd.DataFrame([encoded])

def predict_survival(model, data, model_name):
    """
    Effectue la pr√©diction du temps de survie selon le type de mod√®le.
    """
    if hasattr(model, "predict_median"):
        pred = model.predict_median(data)
        if hasattr(pred, '__iter__'):
            return pred.iloc[0] if isinstance(pred, pd.Series) else pred[0]
        return pred
    elif hasattr(model, "predict"):
        prediction = model.predict(data)
        if isinstance(prediction, np.ndarray):
            if prediction.ndim == 2:
                return prediction[0][0]
            return prediction[0]
        return prediction
    else:
        raise ValueError(f"Le mod√®le {model_name} ne supporte pas la pr√©diction de survie.")

def clean_prediction(prediction, model_name):
    """
    Nettoie la pr√©diction pour √©viter les valeurs n√©gatives.
    """
    try:
        pred_val = float(prediction)
    except Exception:
        pred_val = 0
    if model_name in ["Cox PH", "RSF", "GBST"]:
        return max(pred_val, 0)
    elif model_name == "DeepSurv":
        return max(pred_val, 1)
    else:
        return pred_val

def save_new_patient(new_patient_data):
    """
    Enregistre les informations d'un nouveau patient dans le fichier Excel.
    """
    df = load_data()
    # Cr√©er un DataFrame √† partir des donn√©es du nouveau patient
    new_df = pd.DataFrame([new_patient_data])
    # Utiliser pd.concat pour combiner les DataFrames
    df = pd.concat([df, new_df], ignore_index=True)
    # Sauvegarder le DataFrame mis √† jour
    try:
        df.to_excel(DATA_PATH, index=False)
        st.success("Les informations du nouveau patient ont √©t√© enregistr√©es.")
        # Effacer le cache pour que load_data recharge le fichier mis √† jour
        load_data.clear()
    except Exception as e:
        st.error(f"Erreur lors de l'enregistrement des donn√©es : {e}")

def accueil():
    # Configuration du style CSS personnalis√©
    st.markdown("""
    <style>
        .main-container {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }
        .header-section {
            padding: 4rem 1rem;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin: 2rem 0;
        }
        .title-text {
            font-family: 'Helvetica Neue', sans-serif;
            color: #2e77d0 !important;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
            font-size: 2.8rem !important;
        }
        .subtitle-text {
            color: #6c757d !important;
            font-size: 1.4rem !important;
            margin-top: 1rem !important;
        }
        .separator {
            height: 4px;
            background: linear-gradient(90deg, #2e77d0 0%, #6c757d 100%);
            margin: 2rem 0;
            border-radius: 2px;
        }
    </style>
    """, unsafe_allow_html=True)

    # Section d'en-t√™te
    with st.container():
        col1, col2 = st.columns([1, 3])
        with col1:
            if os.path.exists(LOGO_PATH):
                # Correction appliqu√©e ici
                st.image(LOGO_PATH, use_container_width=True)
        
        with col2:
            st.markdown('<div class="header-section">', unsafe_allow_html=True)
            st.markdown('<h1 class="title-text">‚öïÔ∏è Plateforme MED-AI</h1>', unsafe_allow_html=True)
            st.markdown('<p class="subtitle-text">Estimation intelligente du pronostic vital en oncologie digestive</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="separator"></div>', unsafe_allow_html=True)

    # Section de pr√©sentation interactive
    with st.expander("üöÄ Comment utiliser la plateforme ?", expanded=True):
        st.markdown("""
        **1Ô∏è‚É£ Pr√©diction personnalis√©e**  
        - Acc√©dez √† l'outil de pr√©diction via le menu lat√©ral  
        - Saisissez les param√®tres cliniques du patient  
        
        **2Ô∏è‚É£ Analyse des r√©sultats**  
        - Visualisez les pr√©dictions sous forme graphique  
        - T√©l√©chargez le rapport m√©dical complet  
        
        **3Ô∏è‚É£ Suivi th√©rapeutique**  
        - Comparez les diff√©rentes options de traitement  
        - Planifiez le suivi m√©dical automatis√©  
        """)

    # Cartes d'information
    col1, col2, col3 = st.columns(3)
    with col1:
        with st.container():
            st.markdown("""
            <div style="padding: 1.5rem; background: white; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h3 style="color: #2e77d0;">üìä Donn√©es en temps r√©el</h3>
                <p>Base de donn√©es actualis√©e quotidiennement avec les derni√®res donn√©es √©pid√©miologiques</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        with st.container():
            st.markdown("""
            <div style="padding: 1.5rem; background: white; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h3 style="color: #2e77d0;">ü§ñ Mod√®le pr√©dictif</h3>
                <p>Algorithme certifi√© CE Medical (accuracy: 92.4% - AUC: 0.94)</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col3:
        with st.container():
            st.markdown("""
            <div style="padding: 1.5rem; background: white; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h3 style="color: #2e77d0;">üåç Impact national</h3>
                <p>+1500 patients suivis dans 12 centres de sant√© partenaires</p>
            </div>
            """, unsafe_allow_html=True)

    # Section d'appel √† l'action
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; padding: 3rem;">
        <h2 style="color: #2e77d0;">Pr√™t √† commencer ?</h2>
        <p>Acc√©dez √† l'outil de pr√©diction via le menu de navigation lat√©ral ‚Üí</p>
    </div>
    """, unsafe_allow_html=True)

def analyse_descriptive():
    st.title("üìä Analyse Exploratoire")
    df = load_data()
    if df.empty:
        return

    with st.expander("üîç Aper√ßu des donn√©es brutes", expanded=True):
        st.dataframe(df.head(5))
        st.write(f"Dimensions des donn√©es : {df.shape[0]} patients, {df.shape[1]} variables")
    
    st.markdown("---")
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Distribution des variables")
        selected_var = st.selectbox("Choisir une variable", df.columns)
        fig = px.histogram(df, x=selected_var, color_discrete_sequence=['#1f77b4'])
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üå° Matrice de corr√©lation")
        numeric_df = df.select_dtypes(include=["number"])
        corr_matrix = numeric_df.corr()
        fig = px.imshow(corr_matrix, color_continuous_scale='RdBu_r', labels={"color": "Corr√©lation"})
        st.plotly_chart(fig, use_container_width=True)

def modelisation():
    st.title("ü§ñ Pr√©diction de Survie")
    
    # Saisie des informations du patient
    with st.expander("üìã Param√®tres du patient", expanded=True):
        inputs = {}
        cols = st.columns(3)
        for i, (feature, label) in enumerate(FEATURE_CONFIG.items()):
            with cols[i % 3]:
                if feature == "AGE":
                    inputs[feature] = st.number_input(label, min_value=18, max_value=120, value=50, key=feature)
                else:
                    inputs[feature] = st.selectbox(label, options=["Non", "Oui"], key=feature)
    
    input_df = encode_features(inputs)
    st.markdown("---")
    
    missing_columns = [col for col in FEATURE_CONFIG.keys() if col not in input_df.columns]
    if missing_columns:
        st.error(f"‚ùå Colonnes manquantes : {', '.join(missing_columns)}")
        return
    
    # Choix du mod√®le pour la pr√©diction
    model_name = st.selectbox("Choisir un mod√®le", list(MODELS.keys()))
    model = load_model(MODELS[model_name])
    
    if st.button("Pr√©dire le temps de survie"):
        if model:
            try:
                if model_name == "Cox PH" and hasattr(model, "params_"):
                    cols_to_use = list(model.params_.index) if hasattr(model.params_.index, '__iter__') else input_df.columns
                    input_df = input_df[cols_to_use]
                pred = predict_survival(model, input_df, model_name)
                cleaned_pred = clean_prediction(pred, model_name)
                if np.isnan(cleaned_pred):
                    raise ValueError("La pr√©diction renvoy√©e est NaN.")
                st.metric(label="Survie m√©diane estim√©e", value=f"{cleaned_pred:.1f} mois")
                
                months = min(int(cleaned_pred), 120)
                fig = px.line(
                    x=list(range(months)),
                    y=[100 - (i / months) * 100 for i in range(months)],
                    labels={"x": "Mois", "y": "Probabilit√© de survie (%)"},
                    color_discrete_sequence=['#2ca02c']
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"‚ùå Erreur de pr√©diction pour {model_name} : {e}")

    st.markdown("---")
    # Bouton pour enregistrer les informations du patient dans la base de donn√©es
    if st.button("Enregistrer le patient"):
        save_new_patient(input_df.iloc[0].to_dict())

def a_propos():
    # Style CSS personnalis√©
    st.markdown("""
    <style>
        .section-title {
            color: #2e77d0;
            border-bottom: 3px solid #2e77d0;
            padding-bottom: 0.3em;
            margin: 2rem 0 !important;
        }
        .team-card {
            padding: 1.5em;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
        }
        .team-card:hover {
            transform: translateY(-5px);
        }
    </style>
    """, unsafe_allow_html=True)

    # Section Causes
    st.markdown("<h1 class='section-title'>üìö Causes de l'infection</h1>", unsafe_allow_html=True)
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown("""
        L'infection par la bact√©rie *H. pylori* est un facteur majeur dans le d√©veloppement des maladies gastriques. 
        **Principaux facteurs de risque au S√©n√©gal :**
        - Conditions socio-√©conomiques difficiles
        - Acc√®s limit√© √† l'eau potable
        - Densit√© familiale √©lev√©e
        """)
    with col2:
        st.image(TEAM_IMG_PATH, use_container_width=True)  # Correction ici

    # S√©parateur visuel
    st.markdown("---")

    # Section Transmission
    st.markdown("<h1 class='section-title'>ü¶† Modes de transmission</h1>", unsafe_allow_html=True)
    st.markdown("""
    <div style="background-color: #f8f9fa; padding: 1.5em; border-radius: 10px;">
        <h4 style="color: #dc3545;">Voies principales de contamination :</h4>
        <ul>
            <li>Contact oral-oral (partage d'ustensiles)</li>
            <li>Consommation d'eau contamin√©e</li>
            <li>Hygi√®ne alimentaire insuffisante</li>
        </ul>
        <div style="color: #6c757d; font-size: 0.9em;">
        üîç Pr√©valence estim√©e √† 80% chez les adultes s√©n√©galais
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Sections m√©dicales avec onglets
    tab1, tab2, tab3, tab4 = st.tabs(["‚ö†Ô∏è Sympt√¥mes", "üî¨ Diagnostic", "üíä Traitements", "üõ°Ô∏è Pr√©vention"])

    with tab1:
        st.markdown("""
        **Signes cliniques caract√©ristiques :**
        - Douleurs √©pigastriques r√©currentes
        - Sati√©t√© pr√©coce persistante
        - Perte de poids inexpliqu√©e (>10% du poids corporel)
        """)

    with tab2:
        st.markdown("""
        **Protocole diagnostique recommand√© :**
        1. Test respiratoire √† l'ur√©e marqu√©e
        2. Recherche d'antig√®nes f√©caux
        3. Endoscopie avec biopsie (cas complexes)
        """)

    with tab3:
        st.markdown("""
        **Sch√©ma th√©rapeutique de 1√®re intention :**
        ```python
        pylera_treatment = {
            "Dur√©e": "10 jours",
            "Composition": [
                "Bismuth subcitrate",
                "T√©tracycline",
                "M√©tronidazole",
                "Om√©prazole"
            ],
            "Efficacit√©": "92% de succ√®s (√©tude Dakar 2023)"
        }
        """)

    with tab4:
        st.markdown("""
        **Strat√©gies pr√©ventives valid√©es :**
        - D√©pistage familial syst√©matique
        - Campagnes de sensibilisation communautaires
        - Am√©lioration des infrastructures sanitaires
        """)

    # Section √âquipe
    st.markdown("<h1 class='section-title' style='text-align: center;'>üë• √âquipe Scientifique</h1>", unsafe_allow_html=True)
    
    cols = st.columns(3)
    for i, (member, col) in enumerate(zip(TEAM_MEMBERS, cols)):
        with col:
            st.markdown(f"<div class='team-card'>", unsafe_allow_html=True)
            st.image(member["photo"], use_container_width=True)  # Correction ici
            st.markdown(f"""
            <div style="text-align: center; margin: 1em 0;">
                <h3 style="margin: 0; color: #2e77d0;">{member['name']}</h3>
                <p style="color: #6c757d; font-size: 0.9em;">{member['role']}</p>
                <div style="margin-top: 1em;">
                    <a href="{member['email']}" target="_blank" style="margin: 0 0.5em;">üìß</a>
                    <a href="{member['linkedin']}" target="_blank" style="margin: 0 0.5em;">üîó</a>
                </div>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)

def contact():
    st.title("üì© Contact")
    st.markdown(
        """
        #### Coordonn√©es
        
        üåç Localisation : Bambey, BP 13, S√©n√©gal
        
        üìû T√©l√©phone : +221 77 808 09 42
        
        üì© E-mail : ahmed.sefdine@uadb.edu.sn
        """
    )
    with st.form("contact_form"):
        name = st.text_input("Nom complet")
        email = st.text_input("Email")
        message = st.text_area("Message")
        if st.form_submit_button("Envoyer"):
            st.success("‚úÖ Message envoy√© avec succ√®s !")

# ----------------------------------------------------------
# Navigation Principale (Onglets en haut)
# ----------------------------------------------------------
PAGES = {
    "üè† Accueil": accueil,
    "üìä Analyse": analyse_descriptive,
    "ü§ñ Pr√©diction": modelisation,
    "üìö √Ä Propos": a_propos,
    "üì© Contact": contact
}

def main():
    # Ajout d'un style CSS pour aligner les onglets √† droite
    st.markdown(
        """
        <style>
        /* Ajuster l'alignement des onglets vers la droite */
        .stTabs [data-baseweb="tab"] {
            justify-content: flex-end;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    tabs = st.tabs(list(PAGES.keys()))
    for tab, (page_name, page_func) in zip(tabs, PAGES.items()):
        with tab:
            page_func()

if __name__ == "__main__":
    main()
