import os
import streamlit as st
import pandas as pd
import joblib
import tensorflow as tf
import numpy as np
import plotly.express as px
from PIL import Image
from lifelines import CoxPHFitter
from tensorflow.keras.models import load_model as tf_load_model

# --- Patch scikit-learn pour √©viter l'erreur 'sklearn_tags' ---
try:
    from sklearn.base import BaseEstimator
    if not hasattr(BaseEstimator, "sklearn_tags"):
        @property
        def sklearn_tags(self):
            return {}
        BaseEstimator.sklearn_tags = sklearn_tags
except Exception as e:
    pass

# ----------------------------------------------------------
# Configuration de l'application
# ----------------------------------------------------------
st.set_page_config(
    page_title="MOYO",
    page_icon="‚öïÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Chemins vers les ressources
DATA_PATH = "data/data.xlsx"
LOGO_PATH = "assets/header.jpg"
TEAM_IMG_PATH = "assets/img0.jpeg"

# Configuration des mod√®les
MODELS = {
    "Cox PH": "models/coxph.joblib",
    "RSF": "models/rsf.joblib",
    "DeepSurv": "models/deepsurv.keras",
    "GBST": "models/gbst.joblib"
}

# Configuration des variables
# Pour AGE, on souhaite conserver la valeur num√©rique, pour les autres, conversion Oui/Non
FEATURE_CONFIG = {
    "AGE": "√Çge",
    "Cardiopathie": "Cardiopathie",
    "Ulceregastrique": "Ulc√®re gastrique",
    "Douleurepigastrique": "Douleur √©pigastrique",
    "Ulcero-bourgeonnant": "L√©sion ulc√©ro-bourgeonnante",
    "Denitrution": "D√©nutrition",
    "Tabac": "Tabagisme actif",
    "Mucineux": "Type mucineux",
    "Infiltrant": "Type infiltrant",
    "Stenosant": "Type st√©nosant",
    "Metastases": "M√©tastases",
    "Adenopathie": "Ad√©nopathie",
}


# D√©finition des chemins d'images
TEAM_MEMBERS = [
    {
        "name": "Pr. Aba Diop",
        "role": "Ma√Ætre de Conf√©rences",
        "email": "aba.diop@example.com",
        "linkedin": "https://linkedin.com/in/abadiop",
        "photo": "assets/abadiop.jpeg"  # Remplacez par le vrai chemin
    },
    {
        "name": "PhD. Idrissa Sy",
        "role": "Enseignant Chercheur",
        "email": "idrissa.sy@example.com",
        "linkedin": "https://linkedin.com/in/idrissasy",
        "photo": "assets/idrissasy.jpeg"  # Remplacez par le vrai chemin
    },
    {
        "name": "M. Ahmed Sefdine",
        "role": "√âtudiant",
        "email": "ahmed.sefdine@example.com",
        "linkedin": "https://linkedin.com/in/sefdineahmed",
        "photo": "assets/sefdine.jpeg"  # Remplacez par le vrai chemin
    }
]

# ----------------------------------------------------------
# Fonctions Utilitaires
# ----------------------------------------------------------
@st.cache_data(show_spinner=False)
def load_data():
    """Charge les donn√©es depuis le fichier Excel."""
    if os.path.exists(DATA_PATH):
        return pd.read_excel(DATA_PATH)
    else:
        st.error(f"‚ùå Fichier introuvable : {DATA_PATH}")
        return pd.DataFrame()

@st.cache_resource(show_spinner=False)
def load_model(model_path):
    """
    Charge un mod√®le pr√©-entra√Æn√©.
    Pour les mod√®les Keras (.keras ou .h5) on utilise tf.keras.models.load_model.
    Pour les autres, joblib.load.
    """
    if not os.path.exists(model_path):
        st.error(f"‚ùå Mod√®le introuvable : {model_path}")
        return None

    try:
        _, ext = os.path.splitext(model_path)
        if ext in ['.keras', '.h5']:
            # Fonction de perte custom pour DeepSurv (si n√©cessaire)
            def cox_loss(y_true, y_pred):
                event = tf.cast(y_true[:, 0], dtype=tf.float32)
                risk = y_pred[:, 0]
                log_risk = tf.math.log(tf.cumsum(tf.exp(risk), reverse=True))
                loss = -tf.reduce_mean((risk - log_risk) * event)
                return loss
            return tf_load_model(model_path, custom_objects={"cox_loss": cox_loss})
        else:
            return joblib.load(model_path)
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du mod√®le : {e}")
        return None

def encode_features(inputs):
    """
    Encode les variables.
    Pour 'AGE', on conserve la valeur num√©rique.
    Pour les autres, "OUI" devient 1 et toute autre valeur 0.
    """
    encoded = {}
    for k, v in inputs.items():
        if k == "AGE":
            encoded[k] = v
        else:
            encoded[k] = 1 if v.upper() == "OUI" else 0
    return pd.DataFrame([encoded])

def predict_survival(model, data, model_name):
    """
    Effectue la pr√©diction du temps de survie selon le type de mod√®le.
    """
    if hasattr(model, "predict_median"):
        pred = model.predict_median(data)
        if hasattr(pred, '__iter__'):
            return pred.iloc[0] if isinstance(pred, pd.Series) else pred[0]
        return pred
    elif hasattr(model, "predict"):
        prediction = model.predict(data)
        if isinstance(prediction, np.ndarray):
            if prediction.ndim == 2:
                return prediction[0][0]
            return prediction[0]
        return prediction
    else:
        raise ValueError(f"Le mod√®le {model_name} ne supporte pas la pr√©diction de survie.")

def clean_prediction(prediction, model_name):
    """
    Nettoie la pr√©diction pour √©viter les valeurs n√©gatives.
    """
    try:
        pred_val = float(prediction)
    except Exception:
        pred_val = 0
    if model_name in ["Cox PH", "RSF", "GBST"]:
        return max(pred_val, 0)
    elif model_name == "DeepSurv":
        return max(pred_val, 1)
    else:
        return pred_val

def save_new_patient(new_patient_data):
    """
    Enregistre les informations d'un nouveau patient dans le fichier Excel.
    """
    df = load_data()
    # Cr√©er un DataFrame √† partir des donn√©es du nouveau patient
    new_df = pd.DataFrame([new_patient_data])
    # Utiliser pd.concat pour combiner les DataFrames
    df = pd.concat([df, new_df], ignore_index=True)
    # Sauvegarder le DataFrame mis √† jour
    try:
        df.to_excel(DATA_PATH, index=False)
        st.success("Les informations du nouveau patient ont √©t√© enregistr√©es.")
        # Effacer le cache pour que load_data recharge le fichier mis √† jour
        load_data.clear()
    except Exception as e:
        st.error(f"Erreur lors de l'enregistrement des donn√©es : {e}")

# ----------------------------------------------------------
# D√©finition des Pages
# ----------------------------------------------------------

# D√©finition des Pages
def accueil():
    # Cr√©ation des colonnes avec un fond d'image
    col1, col2 = st.columns([1, 3])
    
    with col1:
        if os.path.exists(LOGO_PATH):
            st.image(LOGO_PATH, width=150)  # Logo plus petit pour plus d'espace visuel

    with col2:
        # Titre accrocheur
        st.title("‚öïÔ∏è Plateforme d'Aide √† la D√©cision")
        st.markdown("**Estimation du temps de survie post-traitement du cancer gastrique**")
    
    st.markdown("---")
    
    # Section d'introduction visuelle avec une image de fond (diaspora)
    st.markdown("<style> .stApp { background-image: url('https://path_to_your_image'); background-size: cover; }</style>", unsafe_allow_html=True)
    st.markdown("### Bienvenue sur notre plateforme")
    st.markdown("Cette plateforme utilise des algorithmes de machine learning pour estimer le temps de survie des patients apr√®s un traitement contre le cancer gastrique. Explorez les diff√©rentes fonctionnalit√©s ci-dessous pour d√©couvrir comment nous vous aidons √† prendre des d√©cisions √©clair√©es.")

    st.markdown("---")
    
    # Mini-pages avec image et description de chaque fonction principale
    st.subheader("Fonctionnalit√©s Principales")
    with st.expander("Estimation du temps de survie"):
        st.image("path_to_image_survie", width=700)
        st.markdown("""
            Cette fonctionnalit√© permet de pr√©dire le temps de survie des patients apr√®s leur traitement. 
            Gr√¢ce √† des mod√®les statistiques avanc√©s et des donn√©es cliniques, nous fournissons des estimations fiables pour aider √† la prise de d√©cision.
        """)

    with st.expander("Suivi des traitements"):
        st.image("path_to_image_suivi", width=700)
        st.markdown("""
            Un outil de suivi d√©taill√© du parcours de traitement des patients. Il aide les m√©decins √† suivre l'efficacit√© des traitements et ajuster le protocole selon les r√©sultats.
        """)

    with st.expander("Analyse des risques"):
        st.image("path_to_image_risque", width=700)
        st.markdown("""
            Cette fonctionnalit√© analyse les risques associ√©s au traitement en prenant en compte des facteurs comme l'√¢ge, les ant√©c√©dents m√©dicaux et d'autres crit√®res.
        """)
    
    st.markdown("---")
    
    # Section d'appel √† l'action pour engager les utilisateurs
    st.markdown("<h2 style='text-align: center;'>Pr√™t √† analyser ?</h2>", unsafe_allow_html=True)
    st.button("Commencer l'analyse", key="start_analysis", help="Cliquez ici pour commencer l'estimation du temps de survie des patients.")



def analyse_descriptive():
    st.title("üìä Analyse Exploratoire")
    df = load_data()
    if df.empty:
        return

    with st.expander("üîç Aper√ßu des donn√©es brutes", expanded=True):
        st.dataframe(df.head(5))
        st.write(f"Dimensions des donn√©es : {df.shape[0]} patients, {df.shape[1]} variables")
    
    st.markdown("---")
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Distribution des variables")
        selected_var = st.selectbox("Choisir une variable", df.columns)
        fig = px.histogram(df, x=selected_var, color_discrete_sequence=['#1f77b4'])
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üå° Matrice de corr√©lation")
        numeric_df = df.select_dtypes(include=["number"])
        corr_matrix = numeric_df.corr()
        fig = px.imshow(corr_matrix, color_continuous_scale='RdBu_r', labels={"color": "Corr√©lation"})
        st.plotly_chart(fig, use_container_width=True)

def modelisation():
    st.title("ü§ñ Pr√©diction de Survie")
    
    # Saisie des informations du patient
    with st.expander("üìã Param√®tres du patient", expanded=True):
        inputs = {}
        cols = st.columns(3)
        for i, (feature, label) in enumerate(FEATURE_CONFIG.items()):
            with cols[i % 3]:
                if feature == "AGE":
                    inputs[feature] = st.number_input(label, min_value=18, max_value=120, value=50, key=feature)
                else:
                    inputs[feature] = st.selectbox(label, options=["Non", "Oui"], key=feature)
    
    input_df = encode_features(inputs)
    st.markdown("---")
    
    missing_columns = [col for col in FEATURE_CONFIG.keys() if col not in input_df.columns]
    if missing_columns:
        st.error(f"‚ùå Colonnes manquantes : {', '.join(missing_columns)}")
        return
    
    # Choix du mod√®le pour la pr√©diction
    model_name = st.selectbox("Choisir un mod√®le", list(MODELS.keys()))
    model = load_model(MODELS[model_name])
    
    if st.button("Pr√©dire le temps de survie"):
        if model:
            try:
                if model_name == "Cox PH" and hasattr(model, "params_"):
                    cols_to_use = list(model.params_.index) if hasattr(model.params_.index, '__iter__') else input_df.columns
                    input_df = input_df[cols_to_use]
                pred = predict_survival(model, input_df, model_name)
                cleaned_pred = clean_prediction(pred, model_name)
                if np.isnan(cleaned_pred):
                    raise ValueError("La pr√©diction renvoy√©e est NaN.")
                st.metric(label="Survie m√©diane estim√©e", value=f"{cleaned_pred:.1f} mois")
                
                months = min(int(cleaned_pred), 120)
                fig = px.line(
                    x=list(range(months)),
                    y=[100 - (i / months) * 100 for i in range(months)],
                    labels={"x": "Mois", "y": "Probabilit√© de survie (%)"},
                    color_discrete_sequence=['#2ca02c']
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"‚ùå Erreur de pr√©diction pour {model_name} : {e}")

    st.markdown("---")
    # Bouton pour enregistrer les informations du patient dans la base de donn√©es
    if st.button("Enregistrer le patient"):
        save_new_patient(input_df.iloc[0].to_dict())

def a_propos():
    # Causes de l'infection
    st.title("üìö Quelles sont les causes ?")
    st.markdown(
        """
        L'infection par la bact√©rie *H. pylori* est un facteur majeur dans le d√©veloppement des maladies gastriques, notamment le cancer de l'estomac. Contract√©e g√©n√©ralement pendant l'enfance, l'infection peut persister toute la vie sans traitement, entra√Ænant une inflammation chronique et des l√©sions pr√©canc√©reuses. Au S√©n√©gal, o√π les conditions socio-√©conomiques et l'acc√®s √† un assainissement optimal peuvent √™tre limit√©s, le risque d'infection demeure √©lev√©.
        """
    )
    st.image(TEAM_IMG_PATH, width=1500)


    # Transmission de la bact√©rie
    st.title("ü¶† Transmission")
    st.markdown(
        """
        *H. pylori* se transmet principalement par voie orale (salive et liquides corporels). La transmission intra-familiale est fr√©quente, surtout en milieu o√π les conditions d'hygi√®ne sont difficiles √† maintenir, comme c'est souvent le cas dans certaines r√©gions du S√©n√©gal. L'infection est surtout contract√©e durant la petite enfance, et le risque diminue apr√®s 10 ans.
        """
    )

    # Sympt√¥mes
    st.title("‚ö†Ô∏è Sympt√¥mes")
    st.markdown(
        """
        Les infections √† *H. pylori* peuvent provoquer :
        - Des douleurs abdominales et une sensation de br√ªlure.
        - Des naus√©es et des vomissements.
        - Une perte de poids inexpliqu√©e.
        
        Dans le cas du cancer gastrique, les signes sont plus subtils et incluent souvent une indigestion persistante. Un diagnostic pr√©coce est primordial, notamment au S√©n√©gal, pour adapter rapidement la prise en charge.
        """
    )

    # Diagnostic
    st.title("üî¨ Diagnostic")
    st.markdown(
        """
        Le diagnostic repose sur deux approches :
        
        **Tests invasifs :**
        - Biopsies avec examen histologique.
        - Culture bact√©rienne et tests mol√©culaires.
        
        **Tests non invasifs :**
        - Test respiratoire.
        - S√©rologie et d√©tection d'antig√®nes dans les selles.
        
        Ces m√©thodes sont adapt√©es en fonction des ressources disponibles, y compris dans le contexte s√©n√©galais.
        """
    )

    # Traitements
    st.title("üíä Traitements")
    st.markdown(
        """
        Le traitement standard consiste en une trith√©rapie de 7 jours associant :
        - Un inhibiteur de la pompe √† protons (IPP).
        - Deux antibiotiques (par exemple, amoxicilline, clarithromycine ou m√©tronidazole).
        
        En cas d'√©chec, une quadrith√©rapie (souvent appel√©e Pylera) peut √™tre propos√©e. Au S√©n√©gal, la r√©sistance aux antibiotiques est un d√©fi majeur, d'o√π l'importance d'adapter les protocoles th√©rapeutiques aux r√©alit√©s locales.
        """
    )

    # Pr√©vention
    st.title("üõ°Ô∏è Pr√©vention")
    st.markdown(
        """
        Pour pr√©venir l'infection et ses complications :
        - Adopter une hygi√®ne de vie saine : ne pas fumer, consommer l'alcool avec mod√©ration.
        - Boire suffisamment d'eau et privil√©gier les aliments frais (fruits et l√©gumes).
        - Am√©liorer l'assainissement et l'acc√®s √† l'eau potable, un enjeu crucial au S√©n√©gal.
        """
    )

    # Population touch√©e
    st.title("üë• Qui est touch√© ?")
    st.markdown(
        """
        *H. pylori* est une infection r√©pandue dans le monde, touchant entre 20 % et 90 % des adultes selon les r√©gions. Au S√©n√©gal, la pr√©valence est particuli√®rement √©lev√©e en raison des conditions sanitaires et socio-√©conomiques. La d√©tection pr√©coce et un traitement appropri√© restent essentiels pour r√©duire le risque de complications graves, notamment les ulc√®res et le cancer gastrique.
        """
    )

    # Pr√©sentation de l'√©quipe
    st.markdown("## üë• √âquipe de Recherche")
    cols = st.columns(3)

    for i, member in enumerate(TEAM_MEMBERS):
        with cols[i]:
            if os.path.exists(member["photo"]):
                st.image(member["photo"], width=400)
            st.markdown(f"**{member['name']}**  \n*{member['role']}*")
            st.markdown(f"[üìß Email]({member['email']})")
            st.markdown(f"[üåêLinkedIn]({member['linkedin']})")

def contact():
    st.title("üì© Contact")
    st.markdown(
        """
        #### Coordonn√©es
        
        üåç Localisation : Bambey, BP 13, S√©n√©gal
        
        üìû T√©l√©phone : +221 77 808 09 42
        
        üì© E-mail : ahmed.sefdine@uadb.edu.sn
        """
    )
    with st.form("contact_form"):
        name = st.text_input("Nom complet")
        email = st.text_input("Email")
        message = st.text_area("Message")
        if st.form_submit_button("Envoyer"):
            st.success("‚úÖ Message envoy√© avec succ√®s !")

# ----------------------------------------------------------
# Navigation Principale (Onglets en haut)
# ----------------------------------------------------------
PAGES = {
    "üè† Accueil": accueil,
    "üìä Analyse": analyse_descriptive,
    "ü§ñ Pr√©diction": modelisation,
    "üìö √Ä Propos": a_propos,
    "üì© Contact": contact
}

def main():
    # Ajout d'un style CSS pour aligner les onglets √† droite
    st.markdown(
        """
        <style>
        /* Ajuster l'alignement des onglets vers la droite */
        .stTabs [data-baseweb="tab"] {
            justify-content: flex-end;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    tabs = st.tabs(list(PAGES.keys()))
    for tab, (page_name, page_func) in zip(tabs, PAGES.items()):
        with tab:
            page_func()

if __name__ == "__main__":
    main()
