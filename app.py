import streamlit as st
import pandas as pd
import joblib
import tensorflow as tf
import plotly.express as px
from PIL import Image

# Configuration initiale
st.set_page_config(
    page_title="OncoSuite - Cancer Gastrique",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ----------------------------------------------------------
# Configuration des donn√©es et mod√®les
# ----------------------------------------------------------
MODELS = {
    "Cox PH": "models/coxph.joblib",
    "RSF": "models/rsf.joblib",
    "GBST": "models/gbst.joblib"
}

FEATURE_CONFIG = {
    'Cardiopathie': {"label": "Cardiopathie", "type": "bool"},
    'Ulceregastrique': {"label": "Ulc√®re gastrique", "type": "bool"},
    'Douleurepigastrique': {"label": "Douleur √©pigastrique", "type": "bool"},
    'Ulcero-bourgeonnant': {"label": "L√©sion ulc√©ro-bourgeonnante", "type": "bool"},
    'Denutrution': {"label": "D√©nutrition", "type": "bool"},
    'Tabac': {"label": "Tabagisme actif", "type": "bool"},
    'Mucineux': {"label": "Type mucineux", "type": "bool"},
    'Infiltrant': {"label": "Type infiltrant", "type": "bool"},
    'Stenosant': {"label": "Type st√©nosant", "type": "bool"},
    'Metastases': {"label": "M√©tastases", "type": "bool"},
    'Adenopathie': {"label": "Ad√©nopathie", "type": "bool"}
}

# ----------------------------------------------------------
# Fonctions utilitaires
# ----------------------------------------------------------
def load_data():
    """Charge les donn√©es depuis le fichier Excel"""
    return pd.read_excel("data/GastricCancerData.xlsx")

def load_model(model_path):
    """Charge un mod√®le avec gestion d'erreur"""
    try:
        if model_path.endswith(".keras"):
            return tf.keras.models.load_model(model_path)
        return joblib.load(model_path)
    except Exception as e:
        st.error(f"Erreur de chargement du mod√®le: {str(e)}")
        return None

def encode_features(inputs):
    """Encode les entr√©es utilisateur en format num√©rique"""
    return pd.DataFrame({k: [1 if v else 0] for k, v in inputs.items()})

# ----------------------------------------------------------
# Sections de l'application
# ----------------------------------------------------------
def accueil():
    st.title("ü©∫ OncoSuite - Plateforme d'Aide √† la D√©cision")
    st.markdown("""
    **Estimation du temps de survie post-traitement du cancer gastrique**
    """)
    st.markdown("---")
    st.write("""
    ### Fonctionnalit√©s principales :
    - üìä Exploration interactive des donn√©es cliniques
    - üìà Analyse statistique descriptive
    - ü§ñ Pr√©diction multi-mod√®les de survie
    - üì§ Export des r√©sultats cliniques
    """)

def analyse_descriptive():
    st.title("üìä Analyse Exploratoire")
    df = load_data()
    
    with st.expander("üîç Aper√ßu des donn√©es brutes", expanded=True):
        st.dataframe(df.head(10))
        st.write(f"Dimensions des donn√©es : {df.shape[0]} patients, {df.shape[1]} variables")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Distribution des variables")
        selected_var = st.selectbox("Choisir une variable", df.columns)
        fig = px.histogram(df, x=selected_var, color_discrete_sequence=['#1f77b4'])
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üå° Matrice de corr√©lation")
        corr_matrix = df.corr()
        fig = px.imshow(corr_matrix, color_continuous_scale='RdBu_r', labels=dict(color="Corr√©lation"))
        st.plotly_chart(fig, use_container_width=True)

def modelisation():
    st.title("ü§ñ Pr√©diction de Survie")
    
    with st.expander("üìã Param√®tres du patient", expanded=True):
        inputs = {}
        for feature, config in FEATURE_CONFIG.items():
            inputs[feature] = st.selectbox(label=config["label"], options=("Non", "Oui"), key=feature)
    
    input_df = encode_features({k: v == "Oui" for k, v in inputs.items()})
    
    st.markdown("---")
    for model_name, model_path in MODELS.items():
        model = load_model(model_path)
        if model:
            try:
                prediction = model.predict(input_df)[0]
                st.metric(label=f"{model_name} - Survie m√©diane estim√©e", value=f"{prediction:.1f} mois")
            except Exception as e:
                st.error(f"Erreur de pr√©diction : {str(e)}")

def main():
    pages = {
        "Accueil": accueil,
        "Analyse": analyse_descriptive,
        "Pr√©diction": modelisation
    }
    
    st.sidebar.title("Navigation")
    selection = st.sidebar.radio("Aller √†", list(pages.keys()))
    pages[selection]()

if __name__ == "__main__":
    main()
